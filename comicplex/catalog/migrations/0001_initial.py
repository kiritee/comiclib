# Generated by Django 3.0.7 on 2020-08-26 22:40

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter character name', max_length=50)),
                ('type', models.CharField(blank=True, choices=[('h', 'Hero'), ('v', 'Villain'), ('o', 'Others'), ('H', 'Superhero Team'), ('V', 'Supervillain Team'), ('O', 'Other team/group')], default='h', help_text='Enter if character is hero/villain/team', max_length=1)),
                ('real_name', models.CharField(help_text='Real name', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Enter name of collection', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Comic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', models.CharField(help_text='Enter name of series', max_length=50)),
                ('volume', models.IntegerField(help_text='Enter Volume no')),
                ('issue_no', models.IntegerField(help_text='Enter issue no')),
                ('issue_suffix', models.CharField(help_text='Enter issue_no_suffix', max_length=1)),
                ('imprint', models.CharField(help_text='Enter name of imprint', max_length=50)),
                ('format', models.CharField(blank=True, choices=[('PB', 'Normal'), ('TPB', 'Trade Paperback'), ('HC', 'Hardcover'), ('OHC', 'Oversized Hardcover'), ('OMN', 'Omnibus'), ('ABS', 'Absolute')], default='PB', help_text='Enter format of comic', max_length=3)),
                ('cover_date', models.DateField(verbose_name='cover_date')),
                ('pages', models.IntegerField(help_text='No of Pages')),
                ('issue_name', models.CharField(help_text='Enter name of issue', max_length=50)),
                ('storyarc', models.CharField(help_text='Enter story arc', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a book genre (e.g. Science Fiction)', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a book genre (e.g. Science Fiction)', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a book genre (e.g. Science Fiction)', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Reading_Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_no', models.IntegerField()),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Collection')),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Comic')),
            ],
            options={
                'ordering': ('order_no',),
            },
        ),
        migrations.AddField(
            model_name='comic',
            name='artists',
            field=models.ManyToManyField(help_text='Enter name of artists', related_name='artists', to='catalog.Person'),
        ),
        migrations.AddField(
            model_name='comic',
            name='colors',
            field=models.ManyToManyField(help_text='Enter name of writers', related_name='colors', to='catalog.Person'),
        ),
        migrations.AddField(
            model_name='comic',
            name='covers',
            field=models.ManyToManyField(help_text='Enter name of writers', related_name='covers', to='catalog.Person'),
        ),
        migrations.AddField(
            model_name='comic',
            name='inks',
            field=models.ManyToManyField(help_text='Enter name of writers', related_name='inks', to='catalog.Person'),
        ),
        migrations.AddField(
            model_name='comic',
            name='letters',
            field=models.ManyToManyField(help_text='Enter name of writers', related_name='letters', to='catalog.Person'),
        ),
        migrations.AddField(
            model_name='comic',
            name='main_character',
            field=models.ForeignKey(help_text='Enter name of main character or team', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Character'),
        ),
        migrations.AddField(
            model_name='comic',
            name='other_characters',
            field=models.ManyToManyField(help_text='Enter name of other characters or team', related_name='comics_others', to='catalog.Character'),
        ),
        migrations.AddField(
            model_name='comic',
            name='publisher',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Publisher'),
        ),
        migrations.AddField(
            model_name='comic',
            name='supporting_characters',
            field=models.ManyToManyField(help_text='Enter name of supporting characters or team', related_name='comics_supporting', to='catalog.Character'),
        ),
        migrations.AddField(
            model_name='comic',
            name='tags',
            field=models.ManyToManyField(help_text='Enter tags', to='catalog.Tag'),
        ),
        migrations.AddField(
            model_name='comic',
            name='villains',
            field=models.ManyToManyField(help_text='Enter name of villains or team', related_name='comics_villains', to='catalog.Character'),
        ),
        migrations.AddField(
            model_name='comic',
            name='writers',
            field=models.ManyToManyField(help_text='Enter name of writers', related_name='writers', to='catalog.Person'),
        ),
        migrations.AddField(
            model_name='collection',
            name='issues',
            field=models.ManyToManyField(related_name='collections', through='catalog.Reading_Order', to='catalog.Comic'),
        ),
        migrations.AddField(
            model_name='collection',
            name='main_character',
            field=models.ForeignKey(help_text='Enter name of main character or team for this collection', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Character'),
        ),
        migrations.AddField(
            model_name='collection',
            name='tie_in_collections',
            field=models.ManyToManyField(related_name='tied_in_with', to='catalog.Collection'),
        ),
        migrations.AddField(
            model_name='collection',
            name='tie_in_issues',
            field=models.ManyToManyField(related_name='tied_in_with', to='catalog.Comic'),
        ),
        migrations.AddField(
            model_name='character',
            name='creators',
            field=models.ManyToManyField(blank=True, help_text='Enter name of creators', to='catalog.Person'),
        ),
        migrations.AddField(
            model_name='character',
            name='enemies',
            field=models.ManyToManyField(help_text='enemies', related_name='adversaries', to='catalog.Character'),
        ),
        migrations.AddField(
            model_name='character',
            name='friends',
            field=models.ManyToManyField(help_text='friends', related_name='family', to='catalog.Character'),
        ),
        migrations.AddField(
            model_name='character',
            name='publisher',
            field=models.ForeignKey(help_text='Select publisher', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Publisher'),
        ),
        migrations.AddField(
            model_name='character',
            name='team_members',
            field=models.ManyToManyField(help_text='enter which characters are member of team (if team)', related_name='part_of_teams', to='catalog.Character'),
        ),
        migrations.AddField(
            model_name='character',
            name='teams',
            field=models.ManyToManyField(help_text='enter which teams character is member of (if person)', related_name='members', to='catalog.Character'),
        ),
    ]
